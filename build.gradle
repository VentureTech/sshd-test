import com.proteusframework.build.GitInfo

import java.util.concurrent.Executors

buildscript {
    repositories {
        if(hasLocalRepo){ maven { url = local_repo } }
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.3.0'
    }

}
repositories {
//    mavenLocal()
    if(hasLocalRepo){ maven { url = local_repo } }
    mavenCentral()
}
GitInfo.populateProject(project)


apply from: 'gradle/plugins.gradle'
apply from: 'gradle/config.gradle'
apply from: 'gradle/dependencies.gradle'

ext.runtimeClassLoader = null
def getRuntimeClassLoader(){
    if(ext.runtimeClassLoader) return ext.runtimeClassLoader
    def urlList = sourceSets.main.runtimeClasspath.files.collect({it.toURI().toURL()})
    ext.runtimeClassLoader = new URLClassLoader(urlList.toArray(new URL[urlList.size()]))
}
ext.executor = Executors.newSingleThreadExecutor()
ext.sftpd = false
def stopSFTPD = {
    if(sftpd) {
        println('(Gradle) Stopping SFTP Server')
        sftpd.stop()
        sftpd = false
    }
}

task startServer
startServer.doFirst {
    if(sftpd)
        return
    def clazz = getRuntimeClassLoader().loadClass('net.venturetech.sshd_test.SftpServer', true)
    sftpd = clazz.newInstance()
    println('(Gradle) Starting SFTP Server')
    executor.submit({
        println("Invoking ${clazz.name}#start()")
        clazz.getDeclaredMethod('start').invoke(sftpd)
    })
    Thread.sleep(1500) // Wait a bit for server to start
}

task lftpDownload(type: Exec, dependsOn: [assemble, startServer]) {
    group 'Tests'
    commandLine 'lftp', '-f', 'download-lftp-script.txt'
    ignoreExitValue = true
}
lftpDownload.doLast(stopSFTPD)



